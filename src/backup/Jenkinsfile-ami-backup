// ENVIRONMENT, SERVER, SERVER_INSTANCE, RETENTION_RATE variables are required and are tags on EC2 instance

pipeline  {
    agent any
        stages {
            stage ("Backup") {
                steps {
                    script {
                    def BACKUP_INSTANCE_ID_COMMAND = 'aws ec2 describe-instances | jq ' + "\'.Reservations[].Instances[] | select(contains({Tags: [{Key: \"Name\"}, {Value: \"${env.ENVIRONMENT}-${env.SERVER}-${env.SERVER_INSTANCE}\"}]}))\'" + ' | grep InstanceId | cut -d \':\' -f 2 | sed \'s/[\",]//g\''
                    def BACKUP_INSTANCE_ID = sh (returnStdout: true, script: "${BACKUP_INSTANCE_ID_COMMAND}").trim()
                    def DATE = sh (returnStdout: true, script: 'date +\"%m-%d-20%y\"').trim()
                    
                    sh "sudo aws ec2 create-image --instance-id ${BACKUP_INSTANCE_ID} --name \"${env.ENVIRONMENT}-${env.SERVER}-backup-${DATE}\" --description \"backup\""
                    sh "sleep 10"
                    }
                }
            }
            
            stage ("Remove old backups") {
                steps {
                    script {
                    def TOTAL_BACKUP_COUNT = sh (returnStdout: true, script: "aws ec2 describe-images --owners self | grep -B 15 ${env.ENVIRONMENT}-${env.SERVER}-backup | grep ImageId | cut -d \'\"\' -f 4 | wc -l").trim()

                        if (env.RETENTION_RATE > TOTAL_BACKUP_COUNT) {
                            echo "skipping removing old backups"
                        } else {
                            int ARITH_1 = TOTAL_BACKUP_COUNT as Integer
                            int ARITH_2 = RETENTION_RATE as Integer
                            int TOTAL_TO_REMOVE = ARITH_1 - ARITH_2 

                            1.upto (TOTAL_TO_REMOVE) {
                            def LOOP_COUNT = "${it}".toInteger()
                            def INSTANCE_VAR = "Name=name,Values=${env.ENVIRONMENT}-${env.SERVER}-backup*"
                            def OLD_AMI_COMMAND = 'aws ec2 describe-images --owners self --filters ' + "${INSTANCE_VAR}" + ' | jq -r \'.Images | sort_by(.CreationDate) | first(.[]).ImageId\''
                            def OLD_AMI = sh (returnStdout: true, script: "${OLD_AMI_COMMAND}").trim()
                            echo OLD_AMI
                            
                                try {
                                    sh "sudo aws ec2 deregister-image --image-id ${OLD_AMI}"
                                    sh "sleep 5"
                                }
                                catch (Exception ex) {
                                    echo "unable to remove or deregister image"
                                }
                            }
                        }
                    }
                }
            }
        }
}
